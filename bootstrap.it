rule("cxx", "C++") {
    accepts: ["*.cpp", "*.cxx", "*.c++"],
    output: {
        pattern: (sys.type=="unix" ? "*.o":"*.obj"),
        expected: (sys.type=="unix" ? "%t-%e.o":"%t-%e.obj")
    },
    prepare: function() {
        print "Checking for a C++ compiler...";
    },
    build: function(input, output, targetName, target) {
        //print "Building: " .. input;
        shell "echo lurk: ${input}"
    }
}

rule("c", "C") {
    accepts: ["*.c", "*.C"],
    output: {
        pattern: (sys.type=="unix" ? "*.o":"*.obj"),
        expected: (sys.type=="unix" ? "%t-%e.o":"%t-%e.obj")
    },
    prepare: function() {
        print "Checking for a C compiler...";
    },
    build: function(input, output, targetName, target) {
    }
}

rule("strip", "Strip") {
    accepts: ["*.o"],
    output: {
        pattern: "*.o-stripped",
        expected: "%t-%e.o-stripped"
    },
    build: function(input, output, targetName, target) {
        var dirstr = "out/"..targetName;
        for(var i,v in input) {
            input[i]=dirstr.."/"..input[i];
        }
        var instr = input.split(" ");
        //var e,o = $("cp ? ?", instr, output);
        shell "echo ${dirstr}"
    }
}

rule("exe", "Executable") {
    accepts: [(sys.type=="unix" ? "*.o-stripped":"*.obj")],
    output: {
        pattern: (sys.type=="unix" ? "*":"*.exe"),
        expected: (sys.type=="unix" ? "%t":"%t.exe"),
        multiple: true
    },
    prepare: function() {
        // check for a compiler to use
    },
    build: function(input, output, targetName, target) {
        print "Building EXE: " .. input;
        return true;
    },
    finalize: function(output) {
        //mv output -> output without .bin or .exe
    },
    clean: function(output) {
        //we must look for a non-shuffixed version of the file.
    }
}
