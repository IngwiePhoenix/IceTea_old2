.TH "tthread::condition_variable" 3 "Sat Mar 26 2016" "IceTea" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tthread::condition_variable \- Condition variable class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <tinythread\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBcondition_variable\fP ()"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "\fB~condition_variable\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "template<class _mutexT > void \fBwait\fP (_mutexT &aMutex)"
.br
.RI "\fIWait for the condition\&. \fP"
.ti -1c
.RI "void \fBnotify_one\fP ()"
.br
.RI "\fINotify one thread that is waiting for the condition\&. \fP"
.ti -1c
.RI "void \fBnotify_all\fP ()"
.br
.RI "\fINotify all threads that are waiting for the condition\&. \fP"
.ti -1c
.RI "\fBcondition_variable\fP (const \fBcondition_variable\fP &)"
.br
.ti -1c
.RI "\fBcondition_variable\fP & \fBoperator=\fP (const \fBcondition_variable\fP &)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Condition variable class\&. 

This is a signalling object for synchronizing the execution flow for several threads\&. Example usage: 
.PP
.nf
// Shared data and associated mutex and condition variable objects
int count;
mutex m;
condition_variable cond;

// Wait for the counter to reach a certain number
void wait_counter(int targetCount)
{
  lock_guard<mutex> guard(m);
  while(count < targetCount)
    cond\&.wait(m);
}

// Increment the counter, and notify waiting threads
void increment()
{
  lock_guard<mutex> guard(m);
  ++ count;
  cond\&.notify_all();
}

.fi
.PP
 
.PP
Definition at line 392 of file tinythread\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void tthread::condition_variable::notify_all ()\fC [inline]\fP"

.PP
Notify all threads that are waiting for the condition\&. All threads that are blocked waiting for this condition variable will be woken up\&. 
.PP
\fBNote:\fP
.RS 4
Only threads that started waiting prior to this call will be woken up\&. 
.RE
.PP

.PP
Definition at line 460 of file tinythread\&.h\&.
.SS "void tthread::condition_variable::notify_one ()\fC [inline]\fP"

.PP
Notify one thread that is waiting for the condition\&. If at least one thread is blocked waiting for this condition variable, one will be woken up\&. 
.PP
\fBNote:\fP
.RS 4
Only threads that started waiting prior to this call will be woken up\&. 
.RE
.PP

.PP
Definition at line 446 of file tinythread\&.h\&.
.SS "template<class _mutexT > void tthread::condition_variable::wait (_mutexT & aMutex)\fC [inline]\fP"

.PP
Wait for the condition\&. The function will block the calling thread until the condition variable is woken by \fC\fBnotify_one()\fP\fP, \fC\fBnotify_all()\fP\fP or a spurious wake up\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaMutex\fP A mutex that will be unlocked when the wait operation starts, an locked again as soon as the wait operation is finished\&. 
.RE
.PP

.PP
Definition at line 420 of file tinythread\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for IceTea from the source code\&.
