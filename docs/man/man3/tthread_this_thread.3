.TH "tthread::this_thread" 3 "Sat Mar 26 2016" "IceTea" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tthread::this_thread \- The namespace \fC\fBthis_thread\fP\fP provides methods for dealing with the calling thread\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBthread::id\fP \fBget_id\fP ()"
.br
.RI "\fIReturn the thread ID of the calling thread\&. \fP"
.ti -1c
.RI "void \fByield\fP ()"
.br
.RI "\fIYield execution to another thread\&. \fP"
.ti -1c
.RI "template<class _Rep , class _Period > void \fBsleep_for\fP (const \fBchrono::duration\fP< _Rep, _Period > &aTime)"
.br
.RI "\fIBlocks the calling thread for a period of time\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The namespace \fC\fBthis_thread\fP\fP provides methods for dealing with the calling thread\&. 


.SH "Function Documentation"
.PP 
.SS "template<class _Rep , class _Period > void tthread::this_thread::sleep_for (const \fBchrono::duration\fP< _Rep, _Period > & aTime)"

.PP
Blocks the calling thread for a period of time\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaTime\fP Minimum time to put the thread to sleep\&. Example usage: 
.PP
.nf
// Sleep for 100 milliseconds
this_thread::sleep_for(chrono::milliseconds(100));

.fi
.PP
 
.RE
.PP
\fBNote:\fP
.RS 4
Supported duration types are: nanoseconds, microseconds, milliseconds, seconds, minutes and hours\&. 
.RE
.PP

.PP
Definition at line 699 of file tinythread\&.h\&.
.SS "void tthread::this_thread::yield ()\fC [inline]\fP"

.PP
Yield execution to another thread\&. Offers the operating system the opportunity to schedule another thread that is ready to run on the current processor\&. 
.PP
Definition at line 681 of file tinythread\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for IceTea from the source code\&.
