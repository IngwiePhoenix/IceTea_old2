.TH "tthread::mutex" 3 "Sat Mar 26 2016" "IceTea" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tthread::mutex \- Mutex class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <tinythread\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBmutex\fP ()"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "\fB~mutex\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "void \fBlock\fP ()"
.br
.RI "\fILock the mutex\&. \fP"
.ti -1c
.RI "bool \fBtry_lock\fP ()"
.br
.RI "\fITry to lock the mutex\&. \fP"
.ti -1c
.RI "void \fBunlock\fP ()"
.br
.RI "\fIUnlock the mutex\&. \fP"
.ti -1c
.RI "\fBmutex\fP (const \fBmutex\fP &)"
.br
.ti -1c
.RI "\fBmutex\fP & \fBoperator=\fP (const \fBmutex\fP &)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBcondition_variable\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Mutex class\&. 

This is a mutual exclusion object for synchronizing access to shared memory areas for several threads\&. The mutex is non-recursive (i\&.e\&. a program may deadlock if the thread that owns a mutex object calls \fBlock()\fP on that object)\&. 
.PP
\fBSee also:\fP
.RS 4
\fBrecursive_mutex\fP 
.RE
.PP

.PP
Definition at line 159 of file tinythread\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void tthread::mutex::lock ()\fC [inline]\fP"

.PP
Lock the mutex\&. The method will block the calling thread until a lock on the mutex can be obtained\&. The mutex remains locked until \fC\fBunlock()\fP\fP is called\&. 
.PP
\fBSee also:\fP
.RS 4
\fBlock_guard\fP 
.RE
.PP

.PP
Definition at line 188 of file tinythread\&.h\&.
.SS "bool tthread::mutex::try_lock ()\fC [inline]\fP"

.PP
Try to lock the mutex\&. The method will try to lock the mutex\&. If it fails, the function will return immediately (non-blocking)\&. 
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if the lock was acquired, or \fCfalse\fP if the lock could not be acquired\&. 
.RE
.PP

.PP
Definition at line 204 of file tinythread\&.h\&.
.SS "void tthread::mutex::unlock ()\fC [inline]\fP"

.PP
Unlock the mutex\&. If any threads are waiting for the lock on this mutex, one of them will be unblocked\&. 
.PP
Definition at line 222 of file tinythread\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for IceTea from the source code\&.
