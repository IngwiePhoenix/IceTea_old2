.TH "tthread::thread" 3 "Sat Mar 26 2016" "IceTea" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tthread::thread \- Thread class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <tinythread\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBid\fP"
.br
.RI "\fIThread ID\&. \fP"
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef pthread_t \fBnative_handle_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBthread\fP ()"
.br
.RI "\fIDefault constructor\&. \fP"
.ti -1c
.RI "\fBthread\fP (void(*aFunction)(void *), void *aArg)"
.br
.RI "\fIThread starting constructor\&. \fP"
.ti -1c
.RI "\fB~thread\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "void \fBjoin\fP ()"
.br
.RI "\fIWait for the thread to finish (join execution flows)\&. \fP"
.ti -1c
.RI "bool \fBjoinable\fP () const "
.br
.RI "\fICheck if the thread is joinable\&. \fP"
.ti -1c
.RI "void \fBdetach\fP ()"
.br
.RI "\fIDetach from the thread\&. \fP"
.ti -1c
.RI "\fBid\fP \fBget_id\fP () const "
.br
.RI "\fIReturn the thread ID of a thread object\&. \fP"
.ti -1c
.RI "native_handle_type \fBnative_handle\fP ()"
.br
.RI "\fIGet the native handle for this thread\&. \fP"
.ti -1c
.RI "\fBthread\fP (const \fBthread\fP &)"
.br
.ti -1c
.RI "\fBthread\fP & \fBoperator=\fP (const \fBthread\fP &)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static unsigned \fBhardware_concurrency\fP ()"
.br
.RI "\fIDetermine the number of threads which can possibly execute concurrently\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Thread class\&. 
.PP
Definition at line 481 of file tinythread\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "tthread::thread::thread ()\fC [inline]\fP"

.PP
Default constructor\&. Construct a \fCthread\fP object without an associated thread of execution (i\&.e\&. non-joinable)\&. 
.PP
Definition at line 494 of file tinythread\&.h\&.
.SS "tthread::thread::thread (void(*)(void *) aFunction, void * aArg)"

.PP
Thread starting constructor\&. Construct a \fCthread\fP object with a new thread of execution\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaFunction\fP A function pointer to a function of type: \fCvoid fun(void * arg)\fP 
.br
\fIaArg\fP Argument to the thread function\&. 
.RE
.PP
\fBNote:\fP
.RS 4
This constructor is not fully compatible with the standard C++ thread class\&. It is more similar to the pthread_create() (POSIX) and CreateThread() (Windows) functions\&. 
.RE
.PP

.PP
Definition at line 188 of file tinythread\&.cpp\&.
.SS "tthread::thread::~thread ()"

.PP
Destructor\&. 
.PP
\fBNote:\fP
.RS 4
If the thread is joinable upon destruction, \fCstd::terminate()\fP will be called, which terminates the process\&. It is always wise to do \fC\fBjoin()\fP\fP before deleting a thread object\&. 
.RE
.PP

.PP
Definition at line 219 of file tinythread\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void tthread::thread::detach ()"

.PP
Detach from the thread\&. After calling \fC\fBdetach()\fP\fP, the thread object is no longer assicated with a thread of execution (i\&.e\&. it is not joinable)\&. The thread continues execution without the calling thread blocking, and when the thread ends execution, any owned resources are released\&. 
.PP
Definition at line 246 of file tinythread\&.cpp\&.
.SS "unsigned tthread::thread::hardware_concurrency ()\fC [static]\fP"

.PP
Determine the number of threads which can possibly execute concurrently\&. This function is useful for determining the optimal number of threads to use for a task\&. 
.PP
\fBReturns:\fP
.RS 4
The number of hardware thread contexts in the system\&. 
.RE
.PP
\fBNote:\fP
.RS 4
If this value is not defined, the function returns zero (0)\&. 
.RE
.PP

.PP
Definition at line 272 of file tinythread\&.cpp\&.
.SS "void tthread::thread::join ()"

.PP
Wait for the thread to finish (join execution flows)\&. After calling \fC\fBjoin()\fP\fP, the thread object is no longer associated with a thread of execution (i\&.e\&. it is not joinable, and you may not join with it nor detach from it)\&. 
.PP
Definition at line 225 of file tinythread\&.cpp\&.
.SS "bool tthread::thread::joinable () const"

.PP
Check if the thread is joinable\&. A thread object is joinable if it has an associated thread of execution\&. 
.PP
Definition at line 238 of file tinythread\&.cpp\&.
.SS "native_handle_type tthread::thread::native_handle ()\fC [inline]\fP"

.PP
Get the native handle for this thread\&. 
.PP
\fBNote:\fP
.RS 4
Under Windows, this is a \fCHANDLE\fP, and under POSIX systems, this is a \fCpthread_t\fP\&. 
.RE
.PP

.PP
Definition at line 539 of file tinythread\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for IceTea from the source code\&.
