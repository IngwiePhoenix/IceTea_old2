.TH "ObjectScript::OS" 3 "Sat Mar 26 2016" "IceTea" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ObjectScript::OS \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBIceTea\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBCore\fP"
.br
.ti -1c
.RI "struct \fBFileHandle\fP"
.br
.ti -1c
.RI "struct \fBFuncDef\fP"
.br
.ti -1c
.RI "class \fBMemoryManager\fP"
.br
.ti -1c
.RI "struct \fBNullDef\fP"
.br
.ti -1c
.RI "struct \fBNumberDef\fP"
.br
.ti -1c
.RI "struct \fBPop\fP"
.br
.ti -1c
.RI "struct \fBSaveStackSize\fP"
.br
.ti -1c
.RI "class \fBString\fP"
.br
.ti -1c
.RI "struct \fBStringDef\fP"
.br
.ti -1c
.RI "struct \fBUtils\fP"
.br
.ti -1c
.RI "struct \fBVector\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBCore::Buffer\fP \fBCoreBuffer\fP"
.br
.ti -1c
.RI "typedef \fBCore::File\fP \fBCoreFile\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<class T > void \fBvectorReserveCapacity\fP (\fBVector\fP< T > &vec, int new_capacity)"
.br
.ti -1c
.RI "template<class T > void \fBvectorReserveCapacityExact\fP (\fBVector\fP< T > &vec, int capacity)"
.br
.ti -1c
.RI "template<class T > void \fBvectorAddItem\fP (\fBVector\fP< T > &vec, const T &val)"
.br
.ti -1c
.RI "template<class T > void \fBvectorClear\fP (\fBVector\fP< T > &vec)"
.br
.ti -1c
.RI "template<class T > void \fBvectorReleaseItems\fP (\fBVector\fP< T > &vec)"
.br
.ti -1c
.RI "template<class T > void \fBvectorDeleteItems\fP (\fBVector\fP< T * > &vec)"
.br
.ti -1c
.RI "template<class T > void \fBvectorInsertAtIndex\fP (\fBVector\fP< T > &vec, int i, const T &val)"
.br
.ti -1c
.RI "template<class T > void \fBvectorRemoveAtIndex\fP (\fBVector\fP< T > &vec, int i)"
.br
.ti -1c
.RI "template<class T > void \fBvectorPush\fP (\fBVector\fP< T > &vec, const T &val)"
.br
.ti -1c
.RI "template<class T > T \fBvectorPop\fP (\fBVector\fP< T > &vec)"
.br
.ti -1c
.RI "template<class T > void \fBreleaseObj\fP (T *&obj)"
.br
.ti -1c
.RI "template<class T > void \fBdeleteObj\fP (T *&obj)"
.br
.ti -1c
.RI "template<class T > void \fBdestroyObj\fP (T &obj)"
.br
.ti -1c
.RI "virtual \fBOS\fP * \fBstart\fP (\fBMemoryManager\fP *=NULL)"
.br
.ti -1c
.RI "virtual bool \fBinit\fP (\fBMemoryManager\fP *=NULL)"
.br
.ti -1c
.RI "\fBOS\fP * \fBretain\fP ()"
.br
.ti -1c
.RI "void \fBrelease\fP ()"
.br
.ti -1c
.RI "virtual void * \fBmalloc\fP (int size)"
.br
.ti -1c
.RI "virtual void \fBfree\fP (void *p)"
.br
.ti -1c
.RI "int \fBgetAllocatedBytes\fP ()"
.br
.ti -1c
.RI "int \fBgetMaxAllocatedBytes\fP ()"
.br
.ti -1c
.RI "int \fBgetUsedBytes\fP ()"
.br
.ti -1c
.RI "int \fBgetCachedBytes\fP ()"
.br
.ti -1c
.RI "void \fBsetMemBreakpointId\fP (int id)"
.br
.ti -1c
.RI "int \fBgetMaxCallStack\fP ()"
.br
.ti -1c
.RI "void \fBsetMaxCallStack\fP (int)"
.br
.ti -1c
.RI "bool \fBisTerminated\fP ()"
.br
.ti -1c
.RI "int \fBgetTerminatedCode\fP ()"
.br
.ti -1c
.RI "void \fBsetTerminated\fP (bool=true, int=0)"
.br
.ti -1c
.RI "void \fBresetTerminated\fP ()"
.br
.ti -1c
.RI "bool \fBisExceptionSet\fP ()"
.br
.ti -1c
.RI "void \fBgetException\fP ()"
.br
.ti -1c
.RI "void \fBsetException\fP ()"
.br
.ti -1c
.RI "void \fBsetException\fP (const char *)"
.br
.ti -1c
.RI "void \fBsetException\fP (const \fBCore::String\fP &)"
.br
.ti -1c
.RI "void \fBhandleException\fP ()"
.br
.ti -1c
.RI "void \fBresetException\fP ()"
.br
.ti -1c
.RI "void \fBgetProperty\fP (bool getter_enabled=true, bool prototype_enabled=true)"
.br
.ti -1c
.RI "void \fBgetProperty\fP (const char *, bool getter_enabled=true, bool prototype_enabled=true)"
.br
.ti -1c
.RI "void \fBgetProperty\fP (const \fBCore::String\fP &, bool getter_enabled=true, bool prototype_enabled=true)"
.br
.ti -1c
.RI "void \fBgetProperty\fP (int offs, const char *, bool getter_enabled=true, bool prototype_enabled=true)"
.br
.ti -1c
.RI "void \fBgetProperty\fP (int offs, const \fBCore::String\fP &, bool getter_enabled=true, bool prototype_enabled=true)"
.br
.ti -1c
.RI "void \fBsetProperty\fP (bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBsetProperty\fP (const char *, bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBsetProperty\fP (const \fBCore::String\fP &, bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBsetProperty\fP (int offs, const char *, bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBsetProperty\fP (int offs, const \fBCore::String\fP &, bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBaddProperty\fP (bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBaddProperty\fP (int offs, bool setter_enabled=true)"
.br
.ti -1c
.RI "bool \fBsetSmartProperty\fP (const char *, bool setter_enabled=true)"
.br
.ti -1c
.RI "bool \fBsetSmartProperty\fP (const \fBCore::String\fP &, bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBdeleteProperty\fP (bool del_enabled=true)"
.br
.ti -1c
.RI "void \fBdeleteProperty\fP (const char *, bool del_enabled=true)"
.br
.ti -1c
.RI "void \fBdeleteProperty\fP (const \fBCore::String\fP &, bool del_enabled=true)"
.br
.ti -1c
.RI "void \fBgetGlobal\fP (const char *, bool getter_enabled=true, bool prototype_enabled=true)"
.br
.ti -1c
.RI "void \fBgetGlobal\fP (const \fBCore::String\fP &, bool getter_enabled=true, bool prototype_enabled=true)"
.br
.ti -1c
.RI "void \fBsetGlobal\fP (const char *, bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBsetGlobal\fP (const \fBCore::String\fP &, bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBsetGlobal\fP (const \fBFuncDef\fP &func, bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBgetPrototype\fP ()"
.br
.ti -1c
.RI "void \fBsetPrototype\fP ()"
.br
.ti -1c
.RI "void \fBsetPrototype\fP (int userdata_crc)"
.br
.ti -1c
.RI "int \fBgetCFuncClosureCount\fP (int offs=\-1)"
.br
.ti -1c
.RI "void \fBgetCFuncClosure\fP (int offs, int i)"
.br
.ti -1c
.RI "void \fBgetCFuncClosure\fP (int i)"
.br
.ti -1c
.RI "void \fBsetCFuncClosure\fP (int offs, int i)"
.br
.ti -1c
.RI "void \fBsetCFuncClosure\fP (int i)"
.br
.ti -1c
.RI "int \fBgetValueId\fP (int offs=\-1)"
.br
.ti -1c
.RI "\fBString\fP \fBgetValueName\fP (int offs=\-1)"
.br
.ti -1c
.RI "\fBString\fP \fBgetValueClassname\fP (int offs=\-1)"
.br
.ti -1c
.RI "\fBString\fP \fBgetValueNameOrClassname\fP (int offs=\-1)"
.br
.ti -1c
.RI "void \fBpushNull\fP ()"
.br
.ti -1c
.RI "template<class T > void \fBpushNumber\fP (const T &val)"
.br
.ti -1c
.RI "void \fBpushBool\fP (bool)"
.br
.ti -1c
.RI "void \fBpushString\fP (const char *)"
.br
.ti -1c
.RI "void \fBpushString\fP (const char *, int len)"
.br
.ti -1c
.RI "void \fBpushString\fP (const void *, int size)"
.br
.ti -1c
.RI "void \fBpushString\fP (const \fBCore::String\fP &)"
.br
.ti -1c
.RI "void \fBpushCFunction\fP (OS_CFunction func, void *user_param=NULL)"
.br
.ti -1c
.RI "void \fBpushCFunction\fP (OS_CFunction func, int closure_values, void *user_param=NULL)"
.br
.ti -1c
.RI "void * \fBpushUserdata\fP (int crc, int data_size, OS_UserdataDtor dtor=NULL, void *user_param=NULL)"
.br
.ti -1c
.RI "void * \fBpushUserdata\fP (int data_size, OS_UserdataDtor dtor=NULL, void *user_param=NULL)"
.br
.ti -1c
.RI "void * \fBpushUserPointer\fP (int crc, void *data, OS_UserdataDtor dtor=NULL, void *user_param=NULL)"
.br
.ti -1c
.RI "void * \fBpushUserPointer\fP (void *data, OS_UserdataDtor dtor=NULL, void *user_param=NULL)"
.br
.ti -1c
.RI "int \fBfindUserPointerValueId\fP (void *data)"
.br
.ti -1c
.RI "void \fBnewObject\fP ()"
.br
.ti -1c
.RI "void \fBnewArray\fP (int initial_capacity=0)"
.br
.ti -1c
.RI "void \fBpushBackTrace\fP (int skip_funcs, int max_trace_funcs=20)"
.br
.ti -1c
.RI "void \fBpushStackValue\fP (int offs=\-1)"
.br
.ti -1c
.RI "void \fBpushGlobals\fP ()"
.br
.ti -1c
.RI "void \fBpushUserPool\fP ()"
.br
.ti -1c
.RI "void \fBpushValueById\fP (int id)"
.br
.ti -1c
.RI "void \fBretainValueById\fP (int id)"
.br
.ti -1c
.RI "void \fBreleaseValueById\fP (int id)"
.br
.ti -1c
.RI "void \fBclone\fP (int offs=\-1)"
.br
.ti -1c
.RI "int \fBgetStackSize\fP ()"
.br
.ti -1c
.RI "int \fBgetAbsoluteOffs\fP (int offs)"
.br
.ti -1c
.RI "void \fBremove\fP (int start_offs=\-1, int count=1)"
.br
.ti -1c
.RI "void \fBpop\fP (int count=1)"
.br
.ti -1c
.RI "void \fBmove\fP (int start_offs, int count, int new_offs)"
.br
.ti -1c
.RI "void \fBmove\fP (int offs, int new_offs)"
.br
.ti -1c
.RI "void \fBexchange\fP (int offs=\-2)"
.br
.ti -1c
.RI "void \fBrunOp\fP (OS_EOpcode opcode)"
.br
.ti -1c
.RI "int \fBgetLen\fP (int offs=\-1)"
.br
.ti -1c
.RI "OS_EValueType \fBgetType\fP (int offs=\-1)"
.br
.ti -1c
.RI "OS_EValueType \fBgetTypeById\fP (int id)"
.br
.ti -1c
.RI "\fBString\fP \fBgetTypeStr\fP (int offs=\-1)"
.br
.ti -1c
.RI "\fBString\fP \fBgetTypeStrById\fP (int id)"
.br
.ti -1c
.RI "bool \fBisNumber\fP (int offs=\-1, double *out=NULL)"
.br
.ti -1c
.RI "bool \fBisString\fP (int offs=\-1, \fBString\fP *out=NULL)"
.br
.ti -1c
.RI "bool \fBisType\fP (OS_EValueType, int offs=\-1)"
.br
.ti -1c
.RI "bool \fBisNull\fP (int offs=\-1)"
.br
.ti -1c
.RI "bool \fBisObject\fP (int offs=\-1)"
.br
.ti -1c
.RI "bool \fBisArray\fP (int offs=\-1)"
.br
.ti -1c
.RI "bool \fBisFunction\fP (int offs=\-1)"
.br
.ti -1c
.RI "bool \fBisUserdata\fP (int offs=\-1)"
.br
.ti -1c
.RI "bool \fBisUserdata\fP (int crc, int offs, int prototype_crc=0)"
.br
.ti -1c
.RI "bool \fBis\fP (int value_offs=\-2, int prototype_offs=\-1)"
.br
.ti -1c
.RI "bool \fBas\fP (int value_offs=\-2, int prototype_offs=\-1)"
.br
.ti -1c
.RI "bool \fBin\fP (int name_offs=\-2, int obj_offs=\-1)"
.br
.ti -1c
.RI "void * \fBtoUserdata\fP (int crc, int offs=\-1, int prototype_crc=0)"
.br
.ti -1c
.RI "void \fBclearUserdata\fP (int crc, int offs=\-1, int prototype_crc=0)"
.br
.ti -1c
.RI "bool \fBtoBool\fP (int offs=\-1)"
.br
.ti -1c
.RI "double \fBtoNumber\fP (int offs=\-1, bool valueof_enabled=true)"
.br
.ti -1c
.RI "float \fBtoFloat\fP (int offs=\-1, bool valueof_enabled=true)"
.br
.ti -1c
.RI "double \fBtoDouble\fP (int offs=\-1, bool valueof_enabled=true)"
.br
.ti -1c
.RI "int \fBtoInt\fP (int offs=\-1, bool valueof_enabled=true)"
.br
.ti -1c
.RI "int \fBtoIntRadix\fP (int offs=\-1, int radix=10, bool valueof_enabled=true)"
.br
.ti -1c
.RI "\fBString\fP \fBtoString\fP (int offs=\-1, bool valueof_enabled=true)"
.br
.ti -1c
.RI "bool \fBtoBool\fP (int offs, bool def)"
.br
.ti -1c
.RI "double \fBtoNumber\fP (int offs, double def, bool valueof_enabled=true)"
.br
.ti -1c
.RI "float \fBtoFloat\fP (int offs, float def, bool valueof_enabled=true)"
.br
.ti -1c
.RI "double \fBtoDouble\fP (int offs, double def, bool valueof_enabled=true)"
.br
.ti -1c
.RI "int \fBtoInt\fP (int offs, int def, bool valueof_enabled=true)"
.br
.ti -1c
.RI "int \fBtoIntRadix\fP (int offs, int def, int radix, bool valueof_enabled=true)"
.br
.ti -1c
.RI "\fBString\fP \fBtoString\fP (int offs, const \fBString\fP &def, bool valueof_enabled=true)"
.br
.ti -1c
.RI "\fBString\fP \fBtoString\fP (int offs, const char *def, bool valueof_enabled=true)"
.br
.ti -1c
.RI "bool \fBpopBool\fP ()"
.br
.ti -1c
.RI "double \fBpopNumber\fP (bool valueof_enabled=true)"
.br
.ti -1c
.RI "float \fBpopFloat\fP (bool valueof_enabled=true)"
.br
.ti -1c
.RI "double \fBpopDouble\fP (bool valueof_enabled=true)"
.br
.ti -1c
.RI "int \fBpopInt\fP (bool valueof_enabled=true)"
.br
.ti -1c
.RI "int \fBpopIntRadix\fP (int radix=0, bool valueof_enabled=true)"
.br
.ti -1c
.RI "\fBString\fP \fBpopString\fP (bool valueof_enabled=true)"
.br
.ti -1c
.RI "bool \fBpopBool\fP (bool def)"
.br
.ti -1c
.RI "double \fBpopNumber\fP (double def, bool valueof_enabled=true)"
.br
.ti -1c
.RI "float \fBpopFloat\fP (float def, bool valueof_enabled=true)"
.br
.ti -1c
.RI "double \fBpopDouble\fP (double def, bool valueof_enabled=true)"
.br
.ti -1c
.RI "int \fBpopInt\fP (int def, bool valueof_enabled=true)"
.br
.ti -1c
.RI "int \fBpopIntRadix\fP (int def, int radix, bool valueof_enabled=true)"
.br
.ti -1c
.RI "\fBString\fP \fBpopString\fP (const \fBString\fP &def, bool valueof_enabled=true)"
.br
.ti -1c
.RI "\fBString\fP \fBpopString\fP (const char *def, bool valueof_enabled=true)"
.br
.ti -1c
.RI "int \fBgetSetting\fP (OS_ESettings)"
.br
.ti -1c
.RI "int \fBsetSetting\fP (OS_ESettings, int)"
.br
.ti -1c
.RI "bool \fBcompileFile\fP (const \fBString\fP &filename, bool required=false, OS_ESourceCodeType source_code_type=OS_SOURCECODE_AUTO, bool check_utf8_bom=true)"
.br
.ti -1c
.RI "bool \fBcompileFakeFile\fP (const \fBString\fP &filename, const \fBString\fP &str, OS_ESourceCodeType source_code_type=OS_SOURCECODE_AUTO, bool check_utf8_bom=true)"
.br
.ti -1c
.RI "bool \fBcompile\fP (const \fBString\fP &str, OS_ESourceCodeType source_code_type=OS_SOURCECODE_AUTO, bool check_utf8_bom=true)"
.br
.ti -1c
.RI "bool \fBcompile\fP (OS_ESourceCodeType source_code_type=OS_SOURCECODE_AUTO, bool check_utf8_bom=true)"
.br
.ti -1c
.RI "void \fBcallFT\fP (int params=0, int ret_values=0, OS_ECallType call_type=OS_CALLTYPE_AUTO, OS_ECallThisUsage call_this_usage=OS_CALLTHIS_KEEP_STACK_VALUE)"
.br
.ti -1c
.RI "void \fBcallTF\fP (int params=0, int ret_values=0, OS_ECallType call_type=OS_CALLTYPE_AUTO, OS_ECallThisUsage call_this_usage=OS_CALLTHIS_KEEP_STACK_VALUE)"
.br
.ti -1c
.RI "void \fBcallF\fP (int params=0, int ret_values=0, OS_ECallType call_type=OS_CALLTYPE_AUTO)"
.br
.ti -1c
.RI "void \fBeval\fP (const char *str, int params=0, int ret_values=0, OS_ESourceCodeType source_code_type=OS_SOURCECODE_AUTO, bool check_utf8_bom=true, bool handle_exception=true)"
.br
.ti -1c
.RI "void \fBeval\fP (const \fBString\fP &str, int params=0, int ret_values=0, OS_ESourceCodeType source_code_type=OS_SOURCECODE_AUTO, bool check_utf8_bom=true, bool handle_exception=true)"
.br
.ti -1c
.RI "void \fBevalFakeFile\fP (const char *filename, const char *str, int params=0, int ret_values=0, OS_ESourceCodeType source_code_type=OS_SOURCECODE_AUTO, bool check_utf8_bom=true, bool handle_exception=true)"
.br
.ti -1c
.RI "void \fBevalFakeFile\fP (const \fBString\fP &filename, const \fBString\fP &str, int params=0, int ret_values=0, OS_ESourceCodeType source_code_type=OS_SOURCECODE_AUTO, bool check_utf8_bom=true, bool handle_exception=true)"
.br
.ti -1c
.RI "void \fBevalProtected\fP (const char *str, int params=0, int ret_values=0, OS_ESourceCodeType source_code_type=OS_SOURCECODE_AUTO, bool check_utf8_bom=true, bool handle_exception=true)"
.br
.ti -1c
.RI "void \fBrequire\fP (const char *filename, bool required=false, int ret_values=0, OS_ESourceCodeType source_code_type=OS_SOURCECODE_AUTO, bool check_utf8_bom=true, bool handle_exception=true)"
.br
.ti -1c
.RI "virtual void \fBrequire\fP (const \fBString\fP &filename, bool required=false, int ret_values=0, OS_ESourceCodeType source_code_type=OS_SOURCECODE_AUTO, bool check_utf8_bom=true, bool handle_exception=true)"
.br
.ti -1c
.RI "void \fBgcFull\fP ()"
.br
.ti -1c
.RI "void \fBsetGCStartWhenUsedBytes\fP (int)"
.br
.ti -1c
.RI "int \fBgetGCStartWhenUsedBytes\fP ()"
.br
.ti -1c
.RI "void \fBsetFuncs\fP (const \fBFuncDef\fP *list, bool setter_enabled=true, int closure_values=0, void *user_param=NULL)"
.br
.ti -1c
.RI "void \fBsetFunc\fP (const \fBFuncDef\fP &def, bool setter_enabled=true, int closure_values=0, void *user_param=NULL)"
.br
.ti -1c
.RI "void \fBsetNumbers\fP (const \fBNumberDef\fP *list, bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBsetNumber\fP (const \fBNumberDef\fP &def, bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBsetStrings\fP (const \fBStringDef\fP *list, bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBsetString\fP (const \fBStringDef\fP &def, bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBsetNulls\fP (const \fBNullDef\fP *list, bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBsetNull\fP (const \fBNullDef\fP &def, bool setter_enabled=true)"
.br
.ti -1c
.RI "void \fBgetObject\fP (const char *name, bool getter_enabled=true, bool prototype_enabled=true)"
.br
.ti -1c
.RI "void \fBgetGlobalObject\fP (const char *name, bool getter_enabled=true, bool prototype_enabled=true)"
.br
.ti -1c
.RI "void \fBgetModule\fP (const char *name, bool getter_enabled=true, bool prototype_enabled=true)"
.br
.ti -1c
.RI "bool \fBnextIteratorStep\fP (int results=2)"
.br
.ti -1c
.RI "bool \fBnextIteratorStep\fP (int results, const \fBCore::String\fP &iter_func)"
.br
.ti -1c
.RI "\fBString\fP \fBchangeFilenameExt\fP (const \fBString\fP &filename, const \fBString\fP &ext)"
.br
.ti -1c
.RI "\fBString\fP \fBchangeFilenameExt\fP (const \fBString\fP &filename, const char *ext)"
.br
.ti -1c
.RI "\fBString\fP \fBgetFilenameExt\fP (const \fBString\fP &filename)"
.br
.ti -1c
.RI "\fBString\fP \fBgetFilenameExt\fP (const char *filename)"
.br
.ti -1c
.RI "\fBString\fP \fBgetFilenameExt\fP (const char *filename, int len)"
.br
.ti -1c
.RI "\fBString\fP \fBgetFilename\fP (const \fBString\fP &filename)"
.br
.ti -1c
.RI "\fBString\fP \fBgetFilename\fP (const char *filename)"
.br
.ti -1c
.RI "\fBString\fP \fBgetFilename\fP (const char *filename, int len)"
.br
.ti -1c
.RI "\fBString\fP \fBgetFilenamePath\fP (const \fBString\fP &filename)"
.br
.ti -1c
.RI "\fBString\fP \fBgetFilenamePath\fP (const char *filename)"
.br
.ti -1c
.RI "\fBString\fP \fBgetFilenamePath\fP (const char *filename, int len)"
.br
.ti -1c
.RI "bool \fBisAbsolutePath\fP (const \fBString\fP &filename)"
.br
.ti -1c
.RI "\fBString\fP \fBresolvePath\fP (const \fBString\fP &filename)"
.br
.ti -1c
.RI "virtual \fBString\fP \fBresolvePath\fP (const \fBString\fP &filename, const \fBString\fP &cur_path)"
.br
.ti -1c
.RI "virtual \fBString\fP \fBgetCompiledFilename\fP (const \fBString\fP &resolved_filename)"
.br
.ti -1c
.RI "virtual \fBString\fP \fBgetTextOpcodesFilename\fP (const \fBString\fP &resolved_filename)"
.br
.ti -1c
.RI "virtual OS_EFileUseType \fBcheckFileUsage\fP (const \fBString\fP &sourcecode_filename, const \fBString\fP &compiled_filename)"
.br
.ti -1c
.RI "virtual OS_ESourceCodeType \fBgetSourceCodeType\fP (const \fBString\fP &filename)"
.br
.ti -1c
.RI "virtual bool \fBisFileExist\fP (const char *filename)"
.br
.ti -1c
.RI "virtual int \fBgetFileSize\fP (const char *filename)"
.br
.ti -1c
.RI "virtual int \fBgetFileSize\fP (\fBFileHandle\fP *f)"
.br
.ti -1c
.RI "virtual \fBFileHandle\fP * \fBopenFile\fP (const char *filename, const char *mode)"
.br
.ti -1c
.RI "virtual int \fBreadFile\fP (void *buf, int size, \fBFileHandle\fP *f)"
.br
.ti -1c
.RI "virtual int \fBwriteFile\fP (const void *buf, int size, \fBFileHandle\fP *f)"
.br
.ti -1c
.RI "virtual int \fBseekFile\fP (\fBFileHandle\fP *f, int offset, int whence)"
.br
.ti -1c
.RI "virtual void \fBcloseFile\fP (\fBFileHandle\fP *f)"
.br
.ti -1c
.RI "virtual void \fBecho\fP (const void *buf, int size)"
.br
.ti -1c
.RI "void \fBecho\fP (const char *str)"
.br
.ti -1c
.RI "void \fBecho\fP (const \fBCore::String\fP &str)"
.br
.ti -1c
.RI "virtual void \fBprintf\fP (const char *fmt,\&.\&.\&.)"
.br
.ti -1c
.RI "void \fBappendQuotedString\fP (\fBCore::Buffer\fP &buf, const \fBCore::String\fP &string)"
.br
.ti -1c
.RI "int \fBgetRandSeed\fP ()"
.br
.ti -1c
.RI "void \fBsetRandSeed\fP (int seed)"
.br
.ti -1c
.RI "double \fBgetRand\fP ()"
.br
.ti -1c
.RI "double \fBgetRand\fP (double up)"
.br
.ti -1c
.RI "double \fBgetRand\fP (double min, double max)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBOS\fP * \fBcreate\fP (\fBMemoryManager\fP *=NULL)"
.br
.ti -1c
.RI "template<class T > static T * \fBcreate\fP (T *os, \fBMemoryManager\fP *manager=NULL)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBshutdown\fP ()"
.br
.ti -1c
.RI "void \fBqsort\fP (void *base, unsigned num, unsigned width, int(*comp)(\fBOS\fP *, const void *, const void *, void *), void *)"
.br
.ti -1c
.RI "void \fBinitCoreFunctions\fP ()"
.br
.ti -1c
.RI "void \fBinitObjectClass\fP ()"
.br
.ti -1c
.RI "void \fBinitArrayClass\fP ()"
.br
.ti -1c
.RI "void \fBinitFunctionClass\fP ()"
.br
.ti -1c
.RI "void \fBinitStringClass\fP ()"
.br
.ti -1c
.RI "void \fBinitNumberClass\fP ()"
.br
.ti -1c
.RI "void \fBinitBooleanClass\fP ()"
.br
.ti -1c
.RI "void \fBinitBufferClass\fP ()"
.br
.ti -1c
.RI "void \fBinitFileClass\fP ()"
.br
.ti -1c
.RI "void \fBinitExceptionClass\fP ()"
.br
.ti -1c
.RI "void \fBinitPathModule\fP ()"
.br
.ti -1c
.RI "void \fBinitMathModule\fP ()"
.br
.ti -1c
.RI "void \fBinitJsonModule\fP ()"
.br
.ti -1c
.RI "void \fBinitGCModule\fP ()"
.br
.ti -1c
.RI "void \fBinitLangTokenizerModule\fP ()"
.br
.ti -1c
.RI "virtual void \fBinitSettings\fP ()"
.br
.ti -1c
.RI "virtual void \fBinitPreScript\fP ()"
.br
.ti -1c
.RI "virtual void \fBinitPostScript\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBMemoryManager\fP * \fBmemory_manager\fP"
.br
.ti -1c
.RI "\fBCore\fP * \fBcore\fP"
.br
.ti -1c
.RI "int \fBref_count\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBOSMemoryManagerOld\fP"
.br
.ti -1c
.RI "template<class Core > struct \fBUserDataDestructor\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 346 of file objectscript\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for IceTea from the source code\&.
