if(DEBUG) {
    print "YO YO YO YO YO";
}

rule("cxx", "C++") {
    accepts: ["*.cpp", "*.cxx", "*.c++"],
    output: {
        pattern: (sys.type=="unix" ? "*.o":"*.obj"),
        expected: (sys.type=="unix" ? "%o/.%t/%e.o":"%o/.%t/%e.obj")
    },
    prepare: function() {
        detect.compiler("c++");
    },
    build: function(input, output, targetName, target) {
        // Now lets get serious.
        var settings = target.settings;
        var outDir = __outputdir;
        var targetDir = pfs.join(outDir, "."..targetName);
        var cmdl=[];
        // Build the command
        cmdl[] = detect.compiler("c++");
        cmdl[] = "-c";
        cmdl[] = input.join(" ");
        cmdl[] = "-o";
        cmdl[] = output;
        var cmd = cmdl.join(" ");

        pfs.mkdir(targetDir);
        if(pfs.dirWritable(targetDir)) {
            return [cmd];
        } else {
            print "ERROR: Target dir is not writable!"
        }
    }
}

rule("c", "C") {
    accepts: ["*.c", "*.C"],
    output: {
        pattern: (sys.type=="unix" ? "*.o":"*.obj"),
        expected: (sys.type=="unix" ? "%o/.%t/%e.o":"%o/.%t/%e.obj")
    },
    prepare: function() {
        detect.compiler("c");
    },
    build: function(input, output, targetName, target) {
        // Now lets get serious.
        var settings = target.settings;
        var outDir = __outputdir;
        var targetDir = pfs.join(outDir, "."..targetName);
        var cmdl=[];
        // Build the command
        cmdl[] = detect.compiler("c");
        cmdl[] = "-c";
        cmdl[] = input.join(" ");
        cmdl[] = "-o";
        cmdl[] = output;
        var cmd = cmdl.join(" ");
        print "$ ${cmd}"

        pfs.mkdir(targetDir);
        if(pfs.dirWritable(targetDir)) {
            return [cmd];
        } else {
            print "ERROR: Target dir is not writable!"
        }
    }
}

rule("strip", "Strip") {
    accepts: ["*.o"],
    output: {
        pattern: "*.o-stripped",
        expected: "%o/.%t/%e.o-stripped"
    },
    prepare: function() {
        // We have to see how we gonna minify this thing.
        if(detect.tool("upx"))
            @tool = "upx IN -o OUT";
        else {
            if(sys.type == "unix") {
                @tool = "cp IN OUT";
            } else {
                @tool = "copy IN OUT";
            }
        }
    },
    build: function(input, output, targetName, target) {
        var dirstr = "out/."..targetName;
        var inlist=[];
        for(var i,v in input) {
            inlist[i] = "'"..input[i].."' ";
        }
        var instr = inlist.join(" ");
        var cmd = @tool;
        cmd = cmd.replace("IN", "${instr}");
        cmd = cmd.replace("OUT", "'${output}'");
        return [cmd];
    }
}

rule("exe", "Executable") {
    accepts: [(sys.type=="unix" ? "*.o-stripped":"*.obj")],
    output: {
        pattern: (sys.type=="unix" ? "*":"*.exe"),
        expected: (sys.type=="unix" ? "%o/%t":"%o/%t.exe")
    },
    prepare: function() {
        // check for a compiler to use
    },
    build: function(input, output, targetName, target) {
        var LINK=[];
        LINK[] = detect.compiler("c++");
        LINK[] = input.join(" ");
        LINK[] = "-o";
        LINK[] = output;
        var cmd = LINK.join(" ");
        print "$ ${cmd}"
        return [cmd];
    },
    finalize: function(output) {
        //mv output -> output without .bin or .exe
    },
    clean: function(output) {
        //we must look for a non-shuffixed version of the file.
    }
}
